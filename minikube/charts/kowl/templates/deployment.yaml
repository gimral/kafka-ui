apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kowl.fullname" . }}
  labels:
    {{- include "kowl.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "kowl.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        {{- include "kowl.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "kowl.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: configs
          configMap:
            name: {{ include "kowl.fullname" . }}
        - name: secrets
          secret:
            secretName: {{ include "kowl.secretName" . }}
        {{- with .Values.extraVolumes }}
        {{- tpl . $ | nindent 8 }}
        {{- end }}
      containers:
      {{- if .Values.authentication.enabled }}
        - name: {{ .Chart.Name }}-ouath-proxy
          image: quay.io/oauth2-proxy/oauth2-proxy:v7.1.3
          imagePullPolicy: IfNotPresent
          args:
            - --provider=oidc
            - --provider-display-name="Keycloak"
            - --email-domain=*
            - --client-id=$(KEYCLOAK_CLIENT_ID)
            - --client-secret=$(KEYCLOAK_CLIENT_SECRET)
            - --pass-access-token=true
            - --pass-authorization-header=true
            - --set-authorization-header=true
            - --oidc-issuer-url=http://keycloak.example.test/auth/realms/master
            - --login-url=http://keycloak.example.test/auth/realms/master/protocol/openid-connect/auth
            - --redeem-url=http://keycloak.example.test/auth/realms/master/protocol/openid-connect/token
            - --validate-url=http://keycloak.example.test/auth/realms/master/protocol/openid-connect/userinfo
            - --http-address=0.0.0.0:4180
            - --cookie-expire=4h0m0s
            - --whitelist-domain=".example.test"
            - --cookie-secure=false
            - --cookie-httponly=true
            - --cookie-domain=.example.test
            - --cookie-secret=$(COOKIE_SECRET)
            - --standard-logging=true
            - --auth-logging=true
            - --request-logging=true
            - --skip-provider-button=true
            - --upstream=http://127.0.0.1:8080/
            - --redis-connection-url=redis://redis-master.default.svc.cluster.local:6379
            - --session-store-type=redis
          env:
            - name: KEYCLOAK_CLIENT_ID
              value: kowl
            - name: KEYCLOAK_CLIENT_SECRET
              value: aTY1OWhTdERxUEVvSTQzTUxISUlHUT09
            # docker run -ti --rm python:3-alpine python -c 'import secrets,base64; print(base64.b64encode(base64.b64encode(secrets.token_bytes(16))));'
            - name: COOKIE_SECRET
              value: Y1JKTDBQeDRKd3RHSVFhR0dNQ3FXZz09
          ports:
            - containerPort: 4180
              protocol: TCP
      {{- end }}
        # - name: {{ .Chart.Name }}
        - name: {{ .Chart.Name }}
          args:
            - "--config.filepath=/etc/kowl/configs/config.yaml"
            - "--kafka.sasl.password=$(KAFKA_SASL_PASSWORD)"
            - "--kafka.tls.passphrase=$(KAFKA_TLS_PASSPHRASE)"
            {{- if eq .Values.image.repository "cloudhut/kowl-business" }}
            - "--login.jwt-secret=$(LOGIN_JWT_SECRET)"
            - "--login.google.client-secret=$(LOGIN_GOOGLE_CLIENT_SECRET)"
            - "--login.github.client-secret=$(LOGIN_GITHUB_CLIENT_SECRET)"
            - "--login.github.directory.personal-access-token=$(LOGIN_GITHUB_PERSONAL_ACCESS_TOKEN)"
            {{- if not .Values.kowl.config.cloudhut }}
            - "--cloudhut.license-token=$(CLOUDHUT_LICENSE_TOKEN)"
            {{- end }}
            {{- end }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ include "kowl.imagesRegistryName" . }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: configs
              mountPath: /etc/kowl/configs
              readOnly: true
            - name: secrets
              mountPath: /etc/kowl/secrets
              readOnly: true
            {{- with .Values.extraVolumeMounts }}
            {{- tpl . $ | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ include "kowl.serverListenPort" . }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /admin/health
              port: http
          readinessProbe:
            # Give Kowl initially some time to connect to all Kafka Brokers
            initialDelaySeconds: 10
            httpGet:
              path: /admin/health
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: KAFKA_SASL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "kowl.secretName" . }}
                  key: {{ get .Values.secret.keyName "kafka-sasl-password" }}
            - name: KAFKA_TLS_PASSPHRASE
              valueFrom:
               secretKeyRef:
                 name: {{ include "kowl.secretName" . }}
                 key: {{ get .Values.secret.keyName "kafka-tls-passphrase" }}
            {{- if eq .Values.image.repository "cloudhut/kowl-business" }}
            {{- if not .Values.kowl.config.cloudhut }}
            - name: CLOUDHUT_LICENSE_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "kowl.secretName" . }}
                  key: {{ get .Values.secret.keyName "cloudhut-license-token" }}
            {{- end }}
            - name: LOGIN_JWT_SECRET
              valueFrom:
               secretKeyRef:
                 name: {{ include "kowl.secretName" . }}
                 key: login-jwt-secret
            - name: LOGIN_GOOGLE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "kowl.secretName" . }}
                  key: login-google-oauth-client-secret
            - name: LOGIN_GITHUB_CLIENT_SECRET
              valueFrom:
               secretKeyRef:
                 name: {{ include "kowl.secretName" . }}
                 key: login-github-oauth-client-secret
            - name: LOGIN_GITHUB_PERSONAL_ACCESS_TOKEN
              valueFrom:
               secretKeyRef:
                 name: {{ include "kowl.secretName" . }}
                 key: login-github-personal-access-token
            {{- end }}
            {{- with .Values.extraEnv }}
            {{- tpl . $ | nindent 12 }}
            {{- end }}
          envFrom:
            {{- with .Values.extraEnvFrom }}
            {{- tpl . $ | nindent 12 }}
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
